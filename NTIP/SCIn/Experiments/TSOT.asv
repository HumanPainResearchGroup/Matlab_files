function h = TSOT(h,opt)

% GUI handle name
h.GUIhname = findall(0, 'Type', 'figure', 'Tag', 'SCIn');

switch opt
    
    case 'setup'
        
        BPopt = 'setup';
        h = buttonpress(h,BPopt);
        
        NSopt = 'connect';
        h = Netstation(h,NSopt);
        
        LJopt = 'connect';
        h = Labjack(h,LJopt);
        
        D1opt = 'setup';
        h = D188(h,D1opt);
    
    case 'start'
        
        mb_handle = msgbox('Put electrodes on participant and press OK to continue.','Message');
        uiwait(mb_handle);
        
        %if isfield(h,'pedal')
        %    FPopt = 'start';
        %    h = footpedal(h,FPopt);
        %end
        
        if isfield(h,'button')
            BPopt = 'start';
            h = buttonpress(h,BPopt);
        end
        
        if isfield(h,'NS')
            NSopt = 'start';
            h = Netstation(h,NSopt);
        end
        
        % create output structure
        allout = cell(1,length(h.Seq.signal));
        h.out.stimtime = allout;
        h.out.pressbutton = allout;
        h.out.presstime = allout;
        h.out.RT = allout;
        
        %h.pause = 0;
        %h.stop = 0;
        h = SeqLoop(h);
        
    %case 'pause'
    %    h.pause=1;
    
    %case 'resume'
    %    h.pause=0;
    
    %case 'stop'
    %    stop(h.Seq.signal);
end

function h = SeqLoop(h)
global d
Priority(2);
tic

h.i=0;
while h.i<=length(h.Seq.signal);
    
    % start time of trial
    st = GetSecs;
    ct=st;
    
    t=toc/60;
    h.i=h.i+1;
    disp(['Trial' num2str(h.i) '. Elapsed time is ' num2str(t) ' mins']);
    
    % D188 - set output channel
    if isfield(h,'D188')
        D1opt = 'setchan';
        h.D188.chan = h.Seq(h.i);
        h = D188(h,D1opt);
    end
    
    % send stimulus
    h = stimtrain(h);
    
    % record stimulus timing
    h.out.stimtime(h.i) = GetSecs;
    
    % STIM marker on EEG
    if isfield(h,'NS') % Netstation
        NSopt = 'mark';
        h = Netstation(h,NSopt);
    elseif isfield(h,'BV') % Brainvision
        BVopt = 'mark';
        h = Brainvision(h,BVopt);
    end
    
    % update current time and exit if needed
    ct=GetSecs;
    if ct-st>h.freq; break; end;
    
    % get GUI data for button press
    GUIh = guidata(h.GUIhname);
    if isfield(GUIh.button,'press')
        %if ismember(GUIh.button.press,h.button.opt)
            h.out.pressbutton{h.i} = GUIh.button.press;
            h.out.presstime{h.i} = h.button.presstime;
            h.out.RT{h.i} = h.button.presstime-st;
        %end
        GUIh = rmfield(GUIh.button,'press');
        guidata(h.GUIhname,GUIh)
    else
        h.out.pressbutton{h.i} = NaN;
        h.out.presstime{h.i} = NaN;
        h.out.RT{h.i} = NaN;
    end
    
    % update current time and exit if needed
    ct=GetSecs;
    if ct-st>h.freq; break; end;
    
    while get(GUIh.PauseResume, 'Value')
        pause(0.1)
        
        % Mark EEG
        if isfield(h,'NS') % Netstation
            NSopt = 'pause';
            h = Netstation(h,NSopt);
        elseif isfield(h,'BV') % Brainvision
            BVopt = 'pause';
            h = Brainvision(h,BVopt);
        end
        
        while ~get(GUIh.PauseResume, 'Value')   
            % Mark EEG
            if isfield(h,'NS') % Netstation
                NSopt = 'resume';
                h = Netstation(h,NSopt);
            elseif isfield(h,'BV') % Brainvision
                BVopt = 'resume';
                h = Brainvision(h,BVopt);
            end
            
            % option to re-start on button press
            if isfield(h,'button')
                BPopt = 'start';
                h = buttonpress(h,BPopt);
            end
            
            break;
        end
    end
    
    % update current time and exit if needed
    ct=GetSecs;
    if ct-st>h.freq; break; end;
    
    stop=0;
    while ~get(GUIh.StartStop, 'Value')
        stop = 1;
        break
        %pause(0.1)
        %while get(StartStop, 'Value')        
        %    break;
        %end
    end
    if stop==1
        break
    end
    
    % update current time and exit if needed
    ct=GetSecs;
    if ct-st>h.freq; break; end;
    
    if h.i~=length(h.Seq.signal)
        if h.Seq.blocks(h.i+1)>h.Seq.blocks(h.i)
            mb_handle = msgbox('End of block: Press OK to start the next block.','Message');
            
            % Mark EEG
            if isfield(h,'NS') % Netstation
                NSopt = 'pause';
                h = Netstation(h,NSopt);
            elseif isfield(h,'BV') % Brainvision
                BVopt = 'pause';
                h = Brainvision(h,BVopt);
            end
            
            uiwait(mb_handle);
            pause(1);
            % Mark EEG
            if isfield(h,'NS') % Netstation
                NSopt = 'resume';
                h = Netstation(h,NSopt);
            elseif isfield(h,'BV') % Brainvision
                BVopt = 'resume';
                h = Brainvision(h,BVopt);
            end  
            tic
        end
    else
        disp('END OF EXPERIMENT');
    end
    
    % update current time and exit if needed
    ct=GetSecs;
    if ct-st>h.freq; break; end;
    
    if h.record_response==1
        fname = ['Output_' subjname '_part' num2str(part) '_startblock' num2str(startblock) '_' t_start];
        out = h.out;
        save(fullfile(d.root,d.out,fname),'out');
    end
end

function h = stimtrain(h)

train_dur = round((1000/h.p_freq)*h.npulses_train);
% pulse train instruction
for pr = 1:h.npulses_train % train
    Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,4,1,0,0);
    Error_Message(Error)

    Error = ljud_AddRequest(ljHandle,LJ_ioPUT_WAIT,4,round((1000000/h.p_freq)/2),0,0);
    Error_Message(Error)

    Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,4,0,0,0);
    Error_Message(Error)

    Error = ljud_AddRequest(ljHandle,LJ_ioPUT_WAIT,4,round((1000000/h.p_freq)/2),0,0);
    Error_Message(Error)
end
%Execute the stimulus train
Error = ljud_GoOne(ljHandle);
Error_Message(Error)
%ljud_GetResult(ljHandle, LJ_ioGET_DIGITAL_BIT, 7, @Value)


%% EXECUTION LOOP
s4=0;
s3=0;
s0=0;
et = []; % event times
t1=0;
for ns = 1:size(h.design,2);
    t=toc/60;
    disp(['Elapsed time is ' num2str(t) ' mins']);
  %  tic
    s = GetSecs;
    %s0=s;
    s1=s;
    s2=s;
    %ns=1;
    %while ns <= size(h.design,2) || stop.requested
    
    trial = ns;
    
    % D188 - set output channel
    elc=h.design(1,ns)
    Error = ljud_AddRequest(h.ljHandle,LJ_ioPUT_DIGITAL_PORT,8,elc,4,0);
    Error_Message(Error)
    
    % wait for a short delay (e.g. 1 ms)
    Error = ljud_AddRequest(h.ljHandle,LJ_ioPUT_WAIT,4,d188_delay,0,0);
    Error_Message(Error)
    
    s1=GetSecs;
    et = [et s1-s];
    
    % send command
    Error = ljud_GoOne(ljHandle);
    Error_Message(Error)
    
    s1=GetSecs;
    et = [et s1-s];
    
   
    train_dur = round((1000/h.p_freq)*h.npulses_train);
    % pulse train instruction
    for pr = 1:h.npulses_train % train
        Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,4,1,0,0);
        Error_Message(Error)

        Error = ljud_AddRequest(ljHandle,LJ_ioPUT_WAIT,4,round((1000000/h.p_freq)/2),0,0);
        Error_Message(Error)

        Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,4,0,0,0);
        Error_Message(Error)

        Error = ljud_AddRequest(ljHandle,LJ_ioPUT_WAIT,4,round((1000000/h.p_freq)/2),0,0);
        Error_Message(Error)
    end
    %Execute the stimulus train
    Error = ljud_GoOne(ljHandle);
    Error_Message(Error)
    %ljud_GetResult(ljHandle, LJ_ioGET_DIGITAL_BIT, 7, @Value)
    
    
    stimtime = GetSecs;
    
    
    if ns==1 %if it's the first trial, note the stimtime. 
        t1 = stimtime;
        tn=0;
    else %otherwise, calculate the time at which the stim occurred relative to the first stim.
        tn = stimtime-t1;
    end
    
    %--- EEG trigger on, via Labjack USB - for Brainamps ---%
    %Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,5,1,0,0);
    %Error_Message(Error)
    
    %--- EEG trigger off, via Labjack USB - for Brainamps ---%
    %Error = ljud_AddRequest(ljHandle,LJ_ioPUT_DIGITAL_BIT,5,0,0,0);
    %Error_Message(Error)
    
    
    % STIM marker on EEG
    if noNS==0 && h.record_EEG==1
        NetStation('Event','STIM',stimtime,0.001,'TNUM',ns,'CNUM',h.design(2,ns),'FNUM',h.design(1,ns),'BNUM',h.design(4,ns));
    end
    
    buttons=0;
    %ListenChar(2)
    %s3 = GetSecs;
    while s1-s<(exitloop/h.freq)
      
        FlushEvents;
        
        s1 = GetSecs; 
        et = [et s1-s];
        if s1-s>(exitloop/h.freq); break; end;
        
        
        %[x,y,buttons] = GetMouse;
        %[buttons, when] = GetChar;
        %ListenChar(0);
        %if any(buttons) && s2==s 
        [keyIsDown,secs, keyCode] = KbCheck;
        
        if ~isempty(foot)
            if keyCode(footi(foot))==1 && s2>s0 %&& s2==s
                s4=GetSecs;
                et = [et s4-s];
                if s4-s >= (exitloop/h.freq); break; end;
            %else
            %    s4=0;
            end
            if keyCode(footi(foot))==1 %&& s3>s2
                s0=GetSecs;
                et = [et s0-s];
                if s0-s >= (exitloop/h.freq); break; end;
            end
        end
        
        %if keyIsDown==0 && s2==s && any(keyCode)==0 % wait for press && find(keyCode)==50
        if ~isempty(foot)
            if keyCode(footi(foot))==0 && s2==s && s0>s2 % depressed during this trial for the first time, but should have previously been pressed on this trial
                %find(keyCode)
                s2 = GetSecs;
                s3=s2;
                
                et = [et s2-s];
                if s2-s>(exitloop/h.freq); break; end;
                
                if noNS==0 && h.record_EEG==1;NetStation('Event','RESP',s2,0.001,'TNUM',ns);end;
            %elseif keyCode(footi(foot))==0 && s2~=s
            %    s3=GetSecs;
            end
        end
        
        s1 = GetSecs; 
        et = [et s1-s];
        if s1-s>(exitloop/h.freq); break; end;
        
        if keyIsDown==1 
            if ismember(80,find(keyCode)) % wait for press
                mb_handle = msgbox('Paused: Press OK to continue.','Message');
                if noNS==0 && h.record_EEG==1;
                    pause(1);
                    NetStation('Event','PAUS');
                    pause(1);
                end;
                uiwait(mb_handle);
                if ~isempty(foot)
                    disp('The experiment will start when after pressing the footswitch');
                    pause(1)
                    keyIsDown=0;
                    while keyIsDown==0
                        [keyIsDown,secs, keyCode] = KbCheck;
                    end
                else
                    pause(1)
                end
                if noNS==0 && h.record_EEG==1;
                    NetStation('Event','CONT');
                    pause(1);
                end;  
            elseif ismember(83,find(keyCode)) % wait for press
                qd_handle = questdlg('Do you want to stop recording?', ...
                     'Stop question', ...
                     'STOP', 'CONT','CONT');

               %uiwait(qd_handle);
               switch qd_handle,
                    case 'STOP',
                      disp('STOPPED - restart if required');
                      if noNS==0 && h.record_EEG==1
                            pause(1);
                            NetStation('Event','STPD');
                            pause(1);
                            Priority(0);
                            NetStation('StopRecording');
                            state = 0; 
                            elc=9;
                            ElecSelect;
                      end
                      return;
                   case 'CONT',
                       if ~isempty(foot)
                           disp('The experiment will start when after pressing the footswitch');
                            pause(1)
                            keyIsDown=0;
                            while keyIsDown==0
                                [keyIsDown,secs, keyCode] = KbCheck;
                            end
                       else
                           pause(1)
                       end
                end
            end
        end

        s1 = GetSecs; 
        et = [et s1-s];
        if s1-s>(exitloop/h.freq); break; end;
    end
    RT(1,ns) = s2-s;
    if s4-s3>0
        RT(2,ns) = s4-s3;
    else
        RT(2,ns) = 0;
    end
    RT(3,ns) = tn;
    if h.displayRT
        Response_time = RT(1,ns)
        Response_length = RT(2,ns)
    end
    %ListenChar(0)
    %ns=ns+1;
    if h.record_response==1 && (part==2 || part==4)
        fname = ['RT_' subjname '_part' num2str(part) '_startblock' num2str(startblock) '_' t_start];
        save(fname,'RT');
    end
    
    s1 = GetSecs; 
    et = [et s1-s];
    
    if ns~=size(h.design,2)
        if h.design(4,ns+1)>h.design(4,ns)
            mb_handle = msgbox('End of block: Press OK to continue.','Message');
            if noNS==0;
                pause(1);
                NetStation('Event','PAUS');
                pause(1);
            end;
            state = 0; 
            elc=9;
            ElecSelect;
            uiwait(mb_handle);
            pause(1);
            if noNS==0;
                NetStation('Event','CONT');
                pause(1);
            end;  
            tic
        end
    else
        disp('END OF EXPERIMENT');
        state = 0; 
        elc=9;
        ElecSelect;
    end
    
    s1 = GetSecs; 
    et = [et s1-s];
    

    while s1-s<(1/h.freq)
        s1 = GetSecs;
    end
    
end
%stop.close;


